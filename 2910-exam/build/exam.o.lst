   1              	# 0 "./src/exam.s"
   2              	# 1 "C:\\Users\\eogha\\OneDrive\\Desktop\\CollegeShite\\VS_Code\\CSU11021\\2910-exam//"
   0              	
   0              	
   0              	
   1              	  .syntax unified
   2              	  .cpu cortex-m3
   3              	  .fpu softvfp
   4              	  .thumb
   5              	  
   6              	  .global  isRowFull
   7              	  .global  lowestFull
   8              	  .global  removeRow
   9              	  .global  tetrominoFits
  10              	  .global  playTetromino
  11              	
  12              	
  13              	@
  14              	@ DEBUGGING TIP!!!
  15              	@
  16              	@ Use the WATCH window in Run/Debug mode to view each
  17              	@   row of the Tetris field.
  18              	@   <---------
  19              	@
  20              	@ Click the + in the WATCH view panel and set the
  21              	@   "expression to watch" to the following:
  22              	@
  23              	@   (char[20][10])(tetrisField)
  24              	@
  25              	
  26              	
  27              	@ isRowFull subroutine
  28              	@ Determines whether a row in a tetris field is full.
  29              	@
  30              	@ Parameters:
  31              	@   R0: address of tetris field
  32              	@   R1: row number
  33              	@
  34              	@ Return:
  35              	@   R0: 1 if the row is full, 0 otherwise
  36              	isRowFull:
  37 0000 2DE9F05F 	  PUSH    {R4-R12, LR}
  38              	
  39 0004 0446     	  MOV     R4, R0 @givenField = R0
  40 0006 0D46     	  MOV     R5, R1 @givenRow = R1
  41              	
  42              	@getToGivenRown
  43 0008 4FF00A06 	  MOV     R6, 0x0a
  44 000c 05FB06F6 	  MUL     R6, R5, R6 @tempNum = givenRow*10
  45 0010 2644     	  ADD     R6, R6, R4 @rowAddress = tempNum+givenField
  46              	  @MOV     R9, 0x03 @testValue
  47              	  @STRB    R9, [R6] @store testValue, test for working code
  48              	
  49              	@checkGivenRow
  50 0012 4FF00007 	  MOV     R7, #0 @i = 0
  51              	.LcheckWhile:
  52 0016 0A2F     	  CMP     R7, #10
  53 0018 0CD0     	  BEQ     .LendCheckWhile @while i < 10
  54 001a 06EB0708 	  ADD     R8, R6, R7 @checkAddress= givenRowStartAddress + i
  55 001e 98F80090 	  LDRB    R9, [R8] @valueInCheck = load checkAddress
  56 0022 B9F1000F 	  CMP     R9, #0
  57 0026 02D1     	  BNE     .LafterIf    
  58 0028 4FF00000 	  MOV     R0, #0
  59 002c 04E0     	  B       .LendIsRowFull
  60              	.LafterIf:
  61 002e 07F10107 	  ADD     R7, R7, #1
  62 0032 F0E7     	  B       .LcheckWhile
  63              	.LendCheckWhile:
  64 0034 4FF00100 	  MOV     R0, #1
  65              	.LendIsRowFull:
  66              	
  67              	  @ Your subroutine implementation goes here
  68              	  
  69 0038 BDE8F09F 	  POP     {R4-R12, PC}
  70              	
  71              	
  72              	@ lowestFull subroutine
  73              	@ Finds the lowest (bottommost) full row of a Tetris field. Note
  74              	@   that the "lowest" row is the row with the highest index.
  75              	@
  76              	@ Parameters:
  77              	@   R0: address of tetris field
  78              	@
  79              	@ Return:
  80              	@   R0: number of lowest full row or -1 if there is no full row
  81              	lowestFull:
  82 003c 2DE9F05F 	  PUSH    {R4-R12, LR}
  83              	
  84              	@storeVariables
  85 0040 0446     	  MOV     R4, R0
  86              	
  87              	@implementation
  88 0042 4FF01305 	  MOV     R5, #19 @lowestRow = 19
  89              	.LlowestWhile:
  90 0046 B5F1FF3F 	  CMP     R5, #-1
  91 004a 0AD0     	  BEQ     .LendLowestWhile @while lowestRow != -1
  92 004c 2046     	  MOV     R0, R4
  93 004e 2946     	  MOV     R1, R5
  94 0050 FFF7FEFF 	  BL      isRowFull @check =isRowFull(givenField, lowestRow)
  95 0054 0128     	  CMP     R0, #1 @if check == 1
  96 0056 01D1     	  BNE     .LafterLowestIf
  97 0058 2846     	  MOV     R0, R5 @return lowestRow
  98 005a 04E0     	  B       .LendLowestFull
  99              	.LafterLowestIf:
 100 005c A5F10105 	  SUB     R5, R5, #1
 101 0060 F1E7     	  B       .LlowestWhile
 102              	.LendLowestWhile:
 103 0062 4FF0FF30 	  MOV     R0, #-1
 104              	
 105              	.LendLowestFull:
 106              	
 107              	  @ Your subroutine implementation goes here
 108              	  
 109 0066 BDE8F09F 	  POP     {R4-R12, PC}
 110              	
 111              	
 112              	@ removeRow subroutine
 113              	@ Removes a specified row from a Tetris field. The occupied
 114              	@   squares in rows above the removed row move downwards.
 115              	@
 116              	@ Parameters:
 117              	@   R0: address of tetris field
 118              	@   R1: row number to be removed
 119              	@
 120              	@ Return:
 121              	@   none
 122              	removeRow:
 123 006a 2DE9F05F 	  PUSH    {R4-R12, LR}
 124              	
 125 006e 0446     	  MOV     R4, R0
 126 0070 0D46     	  MOV     R5, R1
 127              	
 128              	//nukingTime
 129 0072 4FF00A06 	  MOV     R6, 0x0a
 130 0076 06FB05F6 	  MUL     R6, R6, R5
 131 007a 2644     	  ADD     R6, R6, R4 @rowAddress = (givenRow*10)+givenField
 132 007c 4FF00007 	  MOV     R7, 0x00 @i = 0
 133              	nukingTime:
 134 0080 0A2F     	  CMP     R7, 0x0a 
 135 0082 08D0     	  BEQ     .LendNukingTime @while i < 10
 136 0084 06EB0708 	  ADD     R8, R6, R7 @valueToNuke = rowAddress+i
 137 0088 4FF00009 	  MOV     R9, 0x00
 138 008c 88F80090 	  STRB    R9, [R8]
 139 0090 07F10107 	  ADD     R7, R7, 0x01
 140 0094 F4E7     	  B       nukingTime
 141              	.LendNukingTime:
 142              	
 143              	@moveAboveRowsDown
 144 0096 2E46     	  MOV     R6, R5 @saverRow = rowToNuke
 145              	.LmovingAdminWhile:
 146 0098 002E     	  CMP     R6, 0x00
 147 009a 25D0     	  BEQ     .LendMovingAdminWhile
 148 009c A6F10107 	  SUB     R7, R6, 0x01 @rowAbove = saverRow-1
 149 00a0 4FF00A09 	  MOV     R9, 0x0a
 150 00a4 07FB09F7 	  MUL     R7, R7, R9 @rowAbove = rowAbove*10
 151 00a8 2744     	  ADD     R7, R7, R4 @rowAbove = rowAbove+givenField
 152 00aa 06FB09F8 	  MUL     R8, R6, R9 @rowBelow = saverRow*10
 153 00ae A044     	  ADD     R8, R8, R4 @rowBelow = rowBelow+givenField
 154 00b0 4FF00009 	  MOV     R9, 0x00 @j = 0
 155              	.LmovingWhile:
 156 00b4 B9F10A0F 	  CMP     R9, 0x0a @while j < 10
 157 00b8 13D0     	  BEQ     .LendMovingWhile
 158 00ba 07EB0903 	  ADD     R3, R7, R9
 159 00be 93F800A0 	  LDRB    R10, [R3] @check = load[rowAbove+j]
 160 00c2 BAF1010F 	  CMP     R10, 0x01 @if check ==1
 161 00c6 09D1     	  BNE     .LafterMovingIf
 162 00c8 08EB090B 	  ADD     R11, R8, R9 @rowBelow +j
 163 00cc 4FF0010C 	  MOV     R12, 0x01 
 164 00d0 8BF800C0 	  STRB    R12, [R11] @store 1 in rowBelow+j
 165 00d4 4FF0000C 	  MOV     R12, 0x00
 166 00d8 83F800C0 	  STRB    R12, [R3] @store 0 in rowAbove+j
 167              	.LafterMovingIf:
 168 00dc 09F10109 	  ADD     R9, R9, 0x01
 169 00e0 E8E7     	  B       .LmovingWhile
 170              	.LendMovingWhile:
 171 00e2 A6F10106 	  SUB     R6, R6, 0x01
 172 00e6 D7E7     	  B       .LmovingAdminWhile
 173              	.LendMovingAdminWhile:  
 174              	
 175              	
 176              	  @ Your subroutine implementation goes here
 177              	  
 178 00e8 BDE8F09F 	  POP     {R4-R12, PC}
 179              	
 180              	
 181              	
 182              	@ tetrominoFits subroutine
 183              	@ Tests whether a given tetromino can be placed with its top
 184              	@   left corner at a specified row and column number in a
 185              	@   Tetris field.
 186              	@
 187              	@ Parameters:
 188              	@   R0: address of tetris field
 189              	@   R1: row number
 190              	@   R2: column number
 191              	@   R3: address of 4x4 tetromino
 192              	@
 193              	@ Return:
 194              	@   R0: 1 if the tetromino fits, 0 otherwise
 195              	tetrominoFits:
 196 00ec 2DE9F05F 	  PUSH    {R4-R12, LR}
 197              	
 198              	@storeValues
 199 00f0 0446     	  MOV     R4, R0 @givenField =R0
 200 00f2 0D46     	  MOV     R5, R1 @givenRow = R1
 201 00f4 1646     	  MOV     R6, R2 @givenColumn = R2
 202 00f6 1F46     	  MOV     R7, R3 @tetrominoAddress =R3
 203              	
 204              	@getTetrominoOnField
 205 00f8 4FF00A08 	  MOV     R8, 0x0a
 206 00fc 05FB08F8 	  MUL     R8, R5, R8 @givenRow*10
 207 0100 A044     	  ADD     R8, R8, R4 @rowOnField = rowOnField+givenField
 208 0102 B044     	  ADD     R8, R8, R6 @tetrominoTopLeft = rowOnField+givenColumn
 209              	
 210              	@checkIfFits
 211 0104 4FF00009 	  MOV     R9, 0x00 @rowCounter = 0
 212              	.LrowCounterWhile:
 213 0108 B9F1040F 	  CMP     R9, 0x04
 214 010c 23D0     	  BEQ     .LendRowCounterWhile @while rowCounter != 4
 215 010e 4FF0000A 	  MOV     R10, 0x00 @columnCounter = 0
 216              	.LcolumnCounterWhile:
 217 0112 BAF1040F 	  CMP     R10, 0x04
 218 0116 1BD0     	  BEQ     .LendColumnCounterWhile @while columnCounter != 4
 219 0118 4FF0040B 	  MOV     R11, 0x04
 220 011c 0BFB09FB 	  MUL     R11, R11, R9 @tetreminoValue=rowCounter*4
 221 0120 D344     	  ADD     R11, R11, R10 @tetreminoValue=tetreminoValue+columnCounter
 222 0122 9B44     	  ADD     R11, R11, R3 @tetreminoValue=tetreminoValue+tetreminoAddress
 223 0124 9BF800B0 	  LDRB    R11, [R11] @load tetreminoValue
 224 0128 BBF1010F 	  CMP     R11, 0x01
 225 012c 0DD1     	  BNE     .LafterTetrominoCheck @if tetreminoValue == 1
 226 012e 4FF00A0C 	  MOV     R12, 0x0a
 227 0132 0CFB09FC 	  MUL     R12, R12, R9 @checkBox=rowCounter*10
 228 0136 D444     	  ADD     R12, R12, R10 @checkBox=checkBox+columnCounter
 229 0138 C444     	  ADD     R12, R12, R8 @checkBox=checkBox+tetreminoTopLeft
 230 013a 9CF800C0 	  LDRB    R12, [R12] @load checkBox
 231 013e BCF1010F 	  CMP     R12, 0x01
 232 0142 02D1     	  BNE     .LafterTetrominoCheck
 233 0144 4FF00000 	  MOV     R0, 0x00
 234 0148 07E0     	  B       .LendTetrominoFits
 235              	.LafterTetrominoCheck:
 236 014a 0AF1010A 	  ADD     R10, R10, 0x01
 237 014e E0E7     	  B       .LcolumnCounterWhile
 238              	.LendColumnCounterWhile:
 239 0150 09F10109 	  ADD     R9, R9, 0x01
 240 0154 D8E7     	  B       .LrowCounterWhile
 241              	.LendRowCounterWhile:
 242 0156 4FF00100 	  MOV     R0, 0x01
 243              	.LendTetrominoFits:
 244              	  @ Your subroutine implementation goes here
 245              	  
 246 015a BDE8F09F 	  POP     {R4-R12, PC}
 247              	
 248              	
 249              	
 250              	@ playTetromino subroutine
 251              	@ Given a Tetris field and a tetromino, finds the lowest
 252              	@   position to which the tetromino would drop from a given
 253              	@   starting position, updates the field with the tetromino
 254              	@   at that position and updates the board to remove any
 255              	@   rows that become full by placing the tetromino.
 256              	@
 257              	@ Parameters:
 258              	@   R0: address of tetris field
 259              	@   R1: starting tetromino row number
 260              	@   R2: starting tetromino column number
 261              	@   R3: address of 4x4 tetromino
 262              	@
 263              	@ Return:
 264              	@   R0: 1 if the tetromino could be played, 0 otherwise
 265              	playTetromino:
 266 015e 00B5     	  PUSH    {LR}
 267              	
 268              	  @ Your subroutine implementation goes here
 269              	  
 270 0160 00BD     	  POP     {PC}
 271              	
 272              	
 273              	  .end...
DEFINED SYMBOLS
        ./src/exam.s:36     .text:0000000000000000 isRowFull
        ./src/exam.s:81     .text:000000000000003c lowestFull
        ./src/exam.s:122    .text:000000000000006a removeRow
        ./src/exam.s:195    .text:00000000000000ec tetrominoFits
        ./src/exam.s:265    .text:000000000000015e playTetromino
        ./src/exam.s:37     .text:0000000000000000 $t
        ./src/exam.s:133    .text:0000000000000080 nukingTime

NO UNDEFINED SYMBOLS
