   1              	# 0 "./src/fp.s"
   2              	# 1 "C:\\Users\\eogha\\OneDrive\\Desktop\\CollegeShite\\VS_Code\\CSU11021\\2490-fp//"
   0              	
   0              	
   0              	
   1              	  .syntax unified
   2              	  .cpu cortex-m3
   3              	  .fpu softvfp
   4              	  .thumb
   5              	  
   6              	  .global  fp_exp
   7              	  .global  fp_frac
   8              	  .global  fp_enc
   9              	  .global  fp_add
  10              	
  11              	@ fp_exp subroutine
  12              	@ Obtain the exponent of an IEEE-754 (half-precision) number as a signed
  13              	@   integer (2's complement)
  14              	@
  15              	@ Parameters:
  16              	@   R0: IEEE-754 half-precision number (occupying bits 15 to 0)
  17              	@
  18              	@ Return:
  19              	@   R0: exponent (signed integer using 2's complement)
  20              	fp_exp:
  21 0000 30B5     	  PUSH    {R4, R5, LR}                      @ add any registers R4...R12 that you use
  22              	
  23              	  @
  24              	  @ your implementation goes here
  25              	  @
  26 0002 0446     	  MOV     R4, R0
  27 0004 4FF4F845 	  MOV     R5, 0x7C00
  28 0008 04EA0500 	  AND     R0, R4, R5
  29 000c 4FEA9020 	  MOV     R0, R0, LSR #10
  30 0010 A0F10F00 	  SUB     R0, #15
  31              	
  32 0014 30BD     	  POP     {R4, R5, PC}                      @ add any registers R4...R12 that you use
  33              	
  34              	
  35              	
  36              	@ fp_frac subroutine
  37              	@ Obtain the fraction of an IEEE-754 (half-precision) number.
  38              	@
  39              	@ The returned fraction will include the 'hidden' bit to the left
  40              	@   of the radix point (at bit 10). The radix point should be considered to be
  41              	@   between bits 9 and 10.
  42              	@
  43              	@ The returned fraction will be in 2's complement form, reflecting the sign
  44              	@   (sign bit) of the original IEEE-754 number.
  45              	@
  46              	@ Parameters:
  47              	@   R0: IEEE-754 half-precision number (occupying bits 15 to 0)
  48              	@
  49              	@ Return:
  50              	@   R0: fraction (signed fraction, including the 'hidden' bit, in 2's
  51              	@         complement form)
  52              	fp_frac:
  53 0016 70B5     	  PUSH    {R4-R6, LR}                      @ add any registers R4...R12 that you use
  54              	
  55              	  @
  56              	  @ your implementation goes here
  57              	  @
  58              	
  59 0018 0446     	  MOV     R4, R0
  60 001a 04F40045 	  AND     R5, R4, 0x8000 @ sign 
  61              	
  62 001e 24F47C46 	  BIC     R6, R4, 0xFC00 @ fraction
  63 0022 46F48066 	  ORR     R6, R6, 0x0400 @ adds hidden bit
  64 0026 B5F5004F 	  CMP     R5, 0x8000
  65 002a 01D1     	  BNE     notNeg
  66 002c C6F10006 	  NEG     R6, R6
  67              	notNeg:
  68 0030 3046     	  MOV     R0, R6
  69              	  @AND     R0, R0, 0x077F
  70              	
  71 0032 70BD     	  POP     {R4-R6, PC}                      @ add any registers R4...R12 that you use
  72              	
  73              	
  74              	
  75              	@ fp_enc subroutine
  76              	@ Encode an IEEE-754 (half-precision) floating point number given the
  77              	@   fraction (in 2's complement form) and the exponent (also in 2's
  78              	@   complement form).
  79              	@
  80              	@ Fractions that are not normalised will be normalised by the subroutine,
  81              	@   with a corresponding adjustment made to the exponent.
  82              	@
  83              	@ Parameters:
  84              	@   R0: fraction (in 2's complement form)
  85              	@   R1: exponent (in 2's complement form)
  86              	@
  87              	@ Return:
  88              	@   R0: IEEE-754 half-precision floating point number (occupying bits 15 to 0)
  89              	fp_enc:
  90 0034 2DE9F05F 	  PUSH    {R4-R12, LR}                      @ add any registers R4...R12 that you use
  91              	
  92              	  @
  93              	  @ your implementation goes here
  94              	  @
  95              	
  96              	 @ AND     R4, R0, 0x001007FF
  97 0038 0446     	  MOV     R4, R0
  98 003a 0D46     	  MOV     R5, R1
  99 003c 4FF0150C 	  MOV     R12, #21
 100              	  
 101              	
 102 0040 B4FA84F7 	  CLZ     R7, R4 @gets amount of 0's before hidden bit | should be 21
 103 0044 6745     	  CMP     R7, R12
 104 0046 03DB     	  BLT     shiftRight
 105 0048 6745     	  CMP     R7, R12
 106 004a 07DC     	  BGT     shiftLeft
 107 004c A146     	  MOV     R9, R4
 108 004e 0CE0     	  B       afterShift
 109              	shiftRight:
 110 0050 ACEB0708 	  SUB     R8, R12, R7
 111 0054 24FA08F9 	  MOV     R9, R4, LSR R8
 112 0058 4544     	  ADD     R5, R5, R8
 113 005a 06E0     	  B       afterShift
 114              	shiftLeft:
 115 005c A7EB0C08 	  SUB     R8, R7, R12
 116 0060 04FA08F9 	  MOV     R9, R4, LSL R8
 117 0064 A5EB0805 	  SUB     R5, R5, R8
 118 0068 FFE7     	  B       afterShift
 119              	
 120              	afterShift:
 121 006a 29F47C49 	  BIC     R9, R9, 0xFC00 @gets only fraction | removes hidden bit
 122 006e 4FF00000 	  MOV     R0, #0
 123 0072 40EA0900 	  ORR     R0, R0, R9
 124 0076 05F10F05 	  ADD     R5, R5, #15
 125 007a 4FEA8525 	  MOV     R5, R5, LSL #10
 126 007e 40EA0500 	  ORR     R0, R0, R5
 127              	
 128              	  @AND     R6, R4, 0x0400 @gets bit 11 on its own
 129              	  @CMP     R6, 0x0400
 130              	  @BEQ     tisNeg
 131              	
 132              	
 133              	
 134 0082 BDE8F09F 	  POP     {R4-R12, PC}                      @ add any registers R4...R12 that you use
 135              	
 136              	
 137              	@ fp_add subroutine
 138              	@ Add two IEEE-754 half-precision floating point numbers
 139              	@
 140              	@ Paramaters:
 141              	@   R0: a - first number (occupying bits 15 to 0)
 142              	@   R1: b - second number  (occupying bits 15 to 0)
 143              	@
 144              	@ Return:
 145              	@   R0: result - a+b (occupying bits 15 to 0)
 146              	fp_add:
 147 0086 2DE9F05F 	  PUSH    {R4-R12, LR}                      @ add any registers R4...R12 that you use
 148              	
 149              	  @
 150              	  @ your implementation goes here
 151              	  @
 152              	
 153 008a 0446     	  MOV     R4, R0
 154 008c 0D46     	  MOV     R5, R1
 155              	
 156 008e 2046     	  MOV     R0, R4 
 157 0090 FFF7FEFF 	  BL      fp_exp
 158 0094 0646     	  MOV     R6, R0  @gets first expo
 159 0096 2046     	  MOV     R0, R4
 160 0098 FFF7FEFF 	  BL      fp_frac
 161 009c 0746     	  MOV     R7, R0  @gets first fract
 162 009e 2846     	  MOV     R0, R5
 163 00a0 FFF7FEFF 	  BL      fp_exp
 164 00a4 8046     	  MOV     R8, R0  @gets second exp 
 165 00a6 2846     	  MOV     R0, R5
 166 00a8 FFF7FEFF 	  BL      fp_frac
 167 00ac 8146     	  MOV     R9, R0  @gets second fract
 168              	
 169 00ae 4645     	  CMP     R6, R8
 170 00b0 01DC     	  BGT     firstExpoGreater
 171 00b2 06DB     	  BLT     secondExpoGreater
 172 00b4 0BE0     	  B       afterExpoManip
 173              	
 174              	firstExpoGreater:
 175 00b6 A6EB080A 	  SUB     R10, R6, R8 @gets diff in exponent 
 176 00ba 29FA0AF9 	  MOV     R9, R9, LSR R10 @moves second fract by exponent diff
 177 00be D044     	  ADD     R8, R8, R10
 178 00c0 05E0     	  B       afterExpoManip
 179              	secondExpoGreater:
 180 00c2 A8EB060A 	  SUB     R10, R8, R6
 181 00c6 27FA0AF7 	  MOV     R7, R7, LSR R10
 182 00ca 5644     	  ADD     R6, R6, R10
 183 00cc FFE7     	  B       afterExpoManip
 184              	afterExpoManip:
 185 00ce 07EB0900 	  ADD     R0, R7, R9
 186 00d2 3146     	  MOV     R1, R6
 187 00d4 FFF7FEFF 	  BL      fp_enc
 188              	
 189 00d8 BDE8F09F 	  POP     {R4-R12, PC}                      @ add any registers R4...R12 that you use
 190              	
 191              	
 192              	
 193              	  .end...
DEFINED SYMBOLS
          ./src/fp.s:20     .text:0000000000000000 fp_exp
          ./src/fp.s:52     .text:0000000000000016 fp_frac
          ./src/fp.s:89     .text:0000000000000034 fp_enc
          ./src/fp.s:146    .text:0000000000000086 fp_add
          ./src/fp.s:21     .text:0000000000000000 $t
          ./src/fp.s:67     .text:0000000000000030 notNeg
          ./src/fp.s:109    .text:0000000000000050 shiftRight
          ./src/fp.s:114    .text:000000000000005c shiftLeft
          ./src/fp.s:120    .text:000000000000006a afterShift
          ./src/fp.s:174    .text:00000000000000b6 firstExpoGreater
          ./src/fp.s:179    .text:00000000000000c2 secondExpoGreater
          ./src/fp.s:184    .text:00000000000000ce afterExpoManip

NO UNDEFINED SYMBOLS
